ONGOING WORK
 + add the threshold locations using THorizontalThresholdLocation in locations.pas for the arches
    TDoubleSidedThing's does the right thing
    TThresholdLocation invokes its TDoubleSidedThing's AddExplicitlyReferencedThingsFromDirection()
 + see XXX in tests.pas for pre-submit requirements
 + "find tree" hung once after: l u; l s; x tree; n; l u; x sun; find sun; find sky; l at sky; take sun; l; find tree

WORLD
 + doors and other location proxies might have to be in two rooms at once, one for each side, synchronised (e.g. door open state)
   - have a global "door" object (with no parent) and two "door side" objects
   - have the sides forward to the door
   - have the sides be partOf the door when the door is taken off its hinges
 + we should still describe non-implicit things that are on implicit things
 + descriptions of locations should not list exits that are listed in the description
    - basically, exits should be able to be labeled as implicit
 + TFeaturelessOutdoorLocation should magically describe itself:
   + count tpPlantedIn* trees and decide if it's a forested area
     - should be able to refer to "forest of trees"
     - should automatically say, for areas that have no exits but are blocked by trees, that the forest is too dense
       (rather than the default "you can't go that way")
   + if it's not forested but has forests around it, it's a clearing
   + well-worn paths: count how many people have walked on them and should start describing themselves as paths
     - remember the kind of footprint for people exitting and entering in each direction
        - gender (male/female/robot/etc), from/to, direction, how heavy
        - linked list, remember the last five
        - at a regular interval, forget oldest one (grass growing back)
     - if there's two directions that are heavily walked, describe a path between them
     - if there's three or more directions heavily walked, describe an intersection between them
     - if there's a direction walked but noticeably less, describe it as "a lesser path also leads" that way
     - allow players to study tracks
   + if it's surrounded by non-forested, non-path areas, it's a field
 + write a test tool that goes through each description of every location and thing and checks that all the nouns are accessible
 + Players should have PartOfs: eyes, hands, etc
 + Players should have Implicits: "you", "time" ("take time"), etc
 + "harvest forest": I don't understand how to "harvest".
 + "chop down forest": I don't understand how to "chop".
 + "repair", "unbreak system": I don't understand how to "unbreak".

PLOT
 + plot

WIZARDING
 + tools to shape the world - magic digging wand that doesn't make piles appear
 + tools to shape the world - walking through the forest autocreating more forest, fields, rivers, mountains, caves
 + tools to shape the world - cutting down the forest to form fields, piles of wood
 + tools to shape the world - making small huts from piles of wood
 + digging while in a hole - "dig ground" should at least do something while in a hole in the ground
 + "destroy mountain": I don't understand how to "destroy".
 + "delete leaves": I don't understand how to "delete".
 + "make vegetation": I don't understand how to "make".
 + "grow vegetation": I don't understand how to "grow".
 + "create axe": I don't understand how to "create".
 + "instantiate axe": I don't understand how to "instantiate".

NAVIGATION
 + support "go north through the archway", "go down through the hole" now that we auto-disambiguate with "through"
 + exit things by name
    - "leave leaves", "exit leaves": I don't understand how to exit "leaves".
    - "get out of pile": That's a direction, I don't know how to take it.
    - when doing this make sure that we can't escape closed containers
 + "climb [up]", "climb down" commands; "jump" command ("jump up", "jump on the spot", "jump off cliff"); "jump down" command; "up" should imply "climb"; "down" should imply "climb down" if there's something to climb with, otherwise "jump down"; climbing should only work if the relevant FUp/FDown is a TThing that is flagged as climbable
 + "climb cliff": I don't understand how to "climb".
 + "jump into pile of leaves"; jumping into a pile should scatter it (remove psTidy from its FState)
 + "move to north", "move to hut"
 + "climb on pedestal", "climb up onto pedestal", "up onto pedestal", "up", "get on pedestal" should mean the same as "move onto pedestal"
 + "move off", "move off pile", "move me off pile" when standing on the pile of leaves
 + "off" and "get off" should be required to be used instead of "out" when on an object
 + announce when a player disconnects or reconnects
 + "look out" while on something on the ground talks about the ground. It should use the GetDefaultAtom() for the thing it's looking at
 + "exits"
 + seriously consider making it impossible for a TAvatar to be anything but tpOn
    - this would mean that any object that can be entered would have to have a separate surface inside
    - this would dramatically simplify navigation and looking around
    - this might be necessary to make descriptions from inside a bag make as much sense as outside a bag, anyway
 + "enter e" when there are three matching things "e" should pick the right one and enter it

PLAYER INTERACTION
 + if you "take all" when someone is present holding something, you take their stuff
 + "The player arrives from the hut." when another player is seen exiting the hut: would be better if it said "The player leaves the hut"? messages about in-room navigation are pretty poor in general right now (enter hole, enter pile, etc)
 + it says "Carinda enters Camp Cuddlyfort. Carinda arrives from you." when another player is leaving you
 + make shout broadcast to surrounding rooms
 + "hello <player>", "greet <player>"
 + "say to <player>, ..."
 + rescue people in holes when the hole is filled (see // note in THole.HandleAdd)
 + player safe where they can keep things while disconnected
 + player savepoint so that players can reappear in a specific place after disconnecting
 + "poke head out of leaves": I don't understand how to "poke".
 + "hide in leaves": I don't understand how to "hide". (should probably just be equivalent to getting into the leaves)
 + implement dancing, kissing, emoting in general
 + bounce balloon
 + if you disconnect, you should (after a timeout) get encased in a ludicrously heavy transparent bubble.
 + should write a test that triggers the size check in TThing.GetEntrance ("enter apple" should do it)

THINGS
 + shaking something that is part of something else (e.g. shaking the rim of the bag) should just say it's part of something else, not say it's heavy
    -- especially for the rim of the bag of holding, which can't possibly be too heavy to shake!
 + make orbs smaller but with no carrying capability
 + you can move something onto something else even if that other thing is on something that couldn't handle the new total mass or volume. should we handle his via HandleAdd()? (take macguffin; have someone else walk onto it); maybe handle this by chaining CanPut() and friends up the parent chain, but we should have objects HandleAdd unexpected stuff anyway, for when you fumble it (since that doesn't check to see if you can put it there)
 + you can probably push something out of a hole even if you can't push it into a hole; see "// xxx" in player.pas DoRemove
 + when you're being carried by someone and you drop something, it ends up inside them. It should drop out of them.
 + when you drop something from the sky onto a ground surface that's full, it should drop onto something (the biggest non-full
   thing in a depth-first search?) on the ground surface
 + taking something with things on it should make the things fall off
 + throwing - "throw MacGuffin north": I don't understand how to "throw".
 + "push things off table" doesn't work (pushing things off)
 + see whether "put x in ground" does things differently when the ground has a hole that is covered (see "// xxx" in things.pas TSurface.GetInside)
 + TPile.CanTake() should hint if there's something in the pile. "Your fingers brush against something metalic." -- all things would need a GetDescriptionAdjective() or something
 + digging a pile of earth should reveal all the things in the pile and put them on the ground next to the pile
 + "empty x" should be like "move all from x out"
 + "remove"
 + "put all in x" should look everywhere, not just in hands
 + "put y in x" should say "the y is already in the x" when that is the case, it shouldn't take it then put it back in
 + "take bag then move leaves into bag then move leaves out of bag" fails because when you're holding the bag it doesn't think to push them onto the floor
 + "push leaves into bag; push leaves onto ground" - the second part fails because when you're holding the bag it is too far from the floor
 + support "it". In particular, if "look" only mentions one thing, "take it" should work.
 + support dangling parser - if we asked "which?" then accept a single GetThing() as a response (filtering only the previous matches) and resume parsing previous command
 + 'dig hole' should work
 + "fill hole" (with pile of earth) (by moving pile of earth into hole)
 + "push leaves into bag; push leaves out of bag" - the out of part fails (but "move out of" would work) - should be an avRemove
 + "take a leaf" as a way to take a leaf from pile?
 + "take all from pile", "take all in pile", "move pile from hole to ground" should work - GetReferencedThings() should support the "from X", "in X" modifiers [solved with thingseeker?]
 + "move all but inventory" should work
 + "move leaves through door", "push pile through door"
 + 'look under' should move things if they are bigger than what they are on
 + 'look' when inside an object that usually hides its contents (e.g. a pile) still hides its contents when in the pile - do we need FromOutside for GetDescriptionIn()?
 + "look closer" should ask what part you want to look closer at ("look closer" "what do you want to look closer at?" "look closer at tree" "do you want to examine the leaf, or the branch?"
 + "look through opening"
 + "take all there is"
 + "take all again"
 + "take leaves with spade"
 + "put x under y" should say (by putting y on x) (first taking y)
 + "find a b c" if it finds several says "which c do you want to find", not "which a b c do you want to find".
 + support finding multiple things?
 + "look on" should list what's on something (maybe including things like engravings?)
 + looking at something that itself contains things has weird spacing before the second "contains" (looks like missing newline):
    | The hole contains:
    |   A bag of holding.   The bag of holding contains:
    |     A spade.
   Somehow this only happens if the bag is in the hole, not if it's being carried. Compare inventory code to "x hole" code.
 + things claim to be "part of the ground" when they are partOf the ground and you try to take them, which looks weird.
 + need to support the idea of an arch being over something
 + "empty bag"
 + "empty bag on table"
 + if a container is closed and you try to put something inside it, it should implicitly try to open it
 + dropping something should put it at the end of the list, not the start
 + "drop things down" when there's a down exit
 + automatic piles
    - when you drop multiple compatible things on the same surface, they should spontaneously generate a pile to contain them
    - the pile should vanish when there's only one of them left
    - the pile can be clever, e.g. a pile of money should summarise the value of tender (coins, bills) in the pile
 + tpAutoDescribeDirectional seems a bit dubious. Maybe use an lo* constant instead, or something? does that even make sense?
 + find hole says "The hole is below, in the ground." but "below" sounds a bit weird.
 + "read sky" should say "in" not "on" -- maybe base this on whether something has a surface? consider book (in), bag (on)

NETWORK
 + password command
 + gender command / "i am male", "i am a robot", "i am a hive mind" / UI
 + If you send too much data at once, the socket's write buffer is filled, which causes the socket to have an exception (ETryAgain), which causes the game to abort.
 + Sometimes the server just dies silently (killed by the kernel?).

ILLUMINATION
 + Looking should check for illumination by walking all the objects (FUp-not-in-FChildren would need special treatment... maybe some TLocations can contribute light?)
    - light contribution depends on Subject and Perspective
    - light is PitchBlack, Dark, Lit; stop walking after getting Lit
    - also check for FChildren that block Visibility from Perspective to Subject (e.g. smoke, fog)

FOOD
 + "go eat": I don't understand how to go "eat".
 + "feed MacGuffin": I don't understand how to "feed".

THING SEEKER IMPROVEMENTS: LOGIC
 + "put everything in rucksack" => put (everything but (rucksack)) in (rucksack)
 + "drop all" when holding something that contains something drops the contained things separately (first taking them)
 + "drop any two balloons" should pick two balloons that you're holding, not any two anywhere including those on the ground
    - this basically means reworking how the "scope" mechanism works so that it implicitly filters each overall clause, if they all would still match something
    - might make sense to change it to a simple mode: unrestricted, only from self, only from not self, expecting only one [added that last one already]
    - other examples: "drop coins" when there's some on the ground, picks them up then drops them
    - "drop any four coins" when i'm holding 3 and there's 3 on the ground...?
    - "drop all that is a coin" shouldn't drop those on the ground
    - worse: given red and blue tables, "take red then drop table" asks which table to drop
 + make the thing seeker disambiguate on features too. For example:
    - "There is a brown mug here. There is a brown door here." "Open brown." -> should assume the door (and disambiguate)
    - "There is a brown mug here. There is a brown door here." "Take brown." -> should assume the mug (and disambiguate)
    - "There is a small door and a big door here. The small door is open." "Close door." -> should assume the open small door (and disambiguate)
 + find a solution to:
    - "There is an orange here. There is an orange mug here." "Take orange." "Which orange do you mean, the orange or the orange mug?"
    - Trees all over the place. "Examine tree." "Which tree do you mean, the tree, the tree, the tree, the tree, the tree, the tree, the tree, or the tree?"
       - ideally, use FDirectionalLandmarks if possible - "the tree to the north"; should also happen for the arches
       - as a last resort, number them. "Which tree do you mean, the first tree, the second tree, ...".
 + every time we mention something, Thing.UpdatePronouns(Perspective) (Perspective has the pronoun state)

THING SEEKER IMPROVEMENTS: VOCABULARY
 + "take everything THAT IS FROM an arch"
 + "shake all fruit THAT ARE NOT ON the plate"
 + "take everything THAT IS OPEN"
    - add a feature to pattern thingies that allows a callback to check if a particular word is on to support "open bottle" vs "closed bottle"
 + "FROM WITHIN <object>", "FROM INSIDE", "FROM ATOP", etc
 + "look at arch TO the north" -- derived from the FDirectionalLandmarks
    - "look at X Y" where Y is "to the north", "to n", "to north", "in the north", "in n", "in north"
 + "take all bottles EXCEPT bottles from table"
 + "take all bottles from tables, chairs, floor BUT NOT blue bottles"
 + "take blue from red BUT NOT big" - BUT NOT, AND NOT are equivalents of ThatIs for exclusion
 + "take the bottle and the bag THAT IS OPEN and frogs and cats from the table BUT NOT the blue ones that are small"
 + "take the bottle, the bag THAT IS OPEN, frogs, cats from the table, BUT NOT the blue ones THAT ARE small"
 + "put MY penny in MY bag" -- "my" should only look in one's inventory

UI
 + It would be good to merge disambiguation messages, so that "put brown in bag" "(the brown mug) (the black bag) (first taking the brown mug)" became just one statement
 + Disambiguation of things that fail should say "try to", e.g. "(first trying to take the mountain)"
 + Handle multiples of things, so that you can have "take three coins" and it doesn't say "Coin: Taken" "Coin: Taken" "Coin: Taken" but "You take three coins" or some such.
 + Answering questions: each time we say "which do you mean...", if the player just replies, it should try again until getting to the question then try to use the answer

CODE
 + Check all the warnings
 + share matchers across things
    - either explicitly, or have the compiler use a hashtable to return the right one
    - matchers will need to be reference counted
    - make sure to share objects when writing to / reading from disk
 + track strings when reading to/from disk (e.g. so that common descriptions are shared in memory)
 + move build.sh options to a configuration file
 + log exceptions other than parse errors - abstract out the logging code
 + see if it makes sense to change TThing.Navigate() and TThing.GetLookTowardsDirection() to instead use a GetAtomForDirection()-like approach
 + import ../../isd/server/src/infrastructure/hashtable.pas
 + import ../../isd/server/src/infrastructure/storable.pas and the registrations mechanism (regen.pl)
 + consider ../../isd/server/src/infrastructure/filter.pl
 + import ../../isd/server/src/infrastructure/corewebsocket.pas and ../../isd/server/src/infrastructure/corenetwork.pas

MORE NOTES
 http://www.brasslantern.org/writers/iftheory/tads3andi7.html
 http://www.brasslantern.org/writers/iftheory/i7observations.html
 http://www.brasslantern.org/writers/iftheory/autonomousnpcs.html
 http://www.mud.co.uk/richard/imucg2.htm
