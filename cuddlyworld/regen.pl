#!/usr/bin/perl -w
use strict;

open(ATOMLISTHELPER, '>', 'atomlisthelper.inc') or die $!;
print ATOMLISTHELPER "// THIS FILE IS AUTOMATICALLY GENERATED FROM regen.pl -- DO NOT MODIFY DIRECTLY\n";
foreach my $method (qw(Indefinite Definite LongDefinite)) {
    foreach my $class (qw(Atom Thing)) {
        print ATOMLISTHELPER atomlisthelper($class, $method);
    }
    print ATOMLISTHELPER atomarrayhelper($method);
}
close ATOMLISTHELPER;

sub atomlisthelper {
    my($class, $method) = @_;
    return <<EOM;

function T${class}List.Get${method}String(Perspective: TAvatar; const Conjunction: AnsiString): AnsiString;
var
   Count: Cardinal;
   E: T${class}Enumerator;
begin
   Result := '';
   Count := 0;
   E := GetEnumerator();
   try
      while (E.MoveNext()) do
      begin
         if (Count > 0) then
         begin
            if (E.HasMore()) then
               Result := Result + ', '
            else
            if (Count > 1) then
               Result := Result + ', ' + Conjunction + ' '
            else
               Result := Result + ' ' + Conjunction + ' ';
         end;
         Result := Result + E.Current.Get${method}Name(Perspective);
         Inc(Count);
      end;
   finally
      E.Free();
   end;
end;
EOM
}

sub atomarrayhelper {
    my($method) = @_;
    return <<EOM;

function Get${method}String(const List: array of TAtom; StartIndex, EndIndex: Cardinal; Perspective: TAvatar; const Conjunction: AnsiString): AnsiString;
var
   Index: Cardinal;
begin
   Assert(StartIndex >= Low(List));
   Assert(EndIndex <= High(List));
   Assert(StartIndex >= EndIndex);
   Result := '';
   for Index := StartIndex to EndIndex do
   begin
      if (Index-StartIndex > 0) then
      begin
         if (Index < EndIndex) then
            Result := Result + ', '
         else
         if (Index-StartIndex > 1) then
            Result := Result + ', ' + Conjunction + ' '
         else
            Result := Result + ' ' + Conjunction + ' ';
      end;
      Result := Result + List[Index].Get${method}Name(Perspective);
   end;
end;
EOM
}
